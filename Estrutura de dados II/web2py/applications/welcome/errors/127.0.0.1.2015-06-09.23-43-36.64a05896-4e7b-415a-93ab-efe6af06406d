(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'valor' is not defined"
p3
sS'layer'
p4
S'/home/isvaldo/workspace/Trabalhos-Faculdade/Estrutura de dados II/web2py/applications/welcome/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# Controller da aplica\xc3\xa7\xc3\xa3o\n# Trabalho para avalia\xc3\xa7\xc3\xa3o EDA2\nimport random\n\n\ndef index():\n    \'\'\'\n    Formulario de entrada\n    :return:\n    \'\'\'\n    templete = random.randint(1, 5)\n    response.flash = "Layout " + str(templete)\n\n    form = SQLFORM.factory(\n        Field(\'select\', label="Algoritmo", requires=IS_IN_SET(["MDC NAO RECURSIVO",\n                                                               "MDC RECURSIVO",\n                                                               "MAIOR NUMERO",\n                                                               "QUICKSORT",\n                                                               "BOLHA (lista Encadeada)"]))\n    )\n    submit = form.element(\'input\', _type=\'submit\')\n    submit[\'_style\'] = \'display:none;\'\n\n    if form.process().accepted:\n        print form.vars\n\n    return dict(form=form, templete=templete)\n\n\ndef teste():\n    response.flash ="Parte Extra, ainda estou implementando (:"\n    return dict()\n\n\ndef rec_mdc(a, b): return b if (a % b == 0) else rec_mdc(b, a % b)\n\n\ndef mdc(a, b):\n    while True:\n        if a % b == 0: return b\n        a, b = b, a % b\n\n\ndef max_array(array):\n    if len(array) == 1: return array[0]\n    array[1] = array[0] if array[0] > array[1] else array[1]\n    return max_array(array[1:])\n\n\ndef max_no_recursive():\n    form = SQLFORM.factory(\n        Field(\'a\', label="Entrada A", requires=IS_INT_IN_RANGE(1, 100000)),\n        Field(\'b\', label="Entrada B", requires=IS_INT_IN_RANGE(1, 100000)),\n\n    )\n    if form.process().accepted:\n        valor = mdc(int(form.vars.a), int(form.vars.b))\n        return dict(form=form, valor=valor)\n    return dict(form=form)\n\n\ndef max_recursive():\n    form = SQLFORM.factory(\n        Field(\'a\', label="Entrada A", requires=IS_INT_IN_RANGE(1, 100000)),\n        Field(\'b\', label="Entrada B", requires=IS_INT_IN_RANGE(1, 100000))\n    )\n    if form.process().accepted:\n        valor = mdc(int(form.vars.a), int(form.vars.b))\n        return dict(form=form, valor=valor)\n\n    return dict(form=form)\n\n\ndef get_max():\n    form = SQLFORM.factory(\n        Field(\'lista\', label="lista", requires=IS_NOT_EMPTY())\n    )\n    if form.process().accepted:\n        try:\n            Str = str(form.vars.lista).split(",")\n            vetor = [int(n) for n in Str]\n            valor = max_array(vetor)\n        except:\n            response.flash = "ERRO, formato invalido, tente \'1,2,3\'"\n            return dict(form=form)\n\n        return dict(form=form, valor=valor)\n    return dict(form=form)\n\n\n\ndef bolha():\n    form = SQLFORM.factory(\n        Field(\'lista\', label="lista", requires=IS_NOT_EMPTY())\n    )\n    if form.process().accepted:\n        try:\n            Str = str(form.vars.lista).split(",")\n            vetor = [int(n) for n in Str]\n            lista = ListaPersonalizada()\n            for i in vetor:\n                lista.add(i)\n            bubbleSort(lista)\n\n            vetor = []\n            for i in lista:\n                vetor.append(i.valor)\n\n        except:\n            response.flash = "ERRO, formato invalido, tente \'1,2,3\'"\n            return dict(form=form)\n\n        return dict(form=form, valor=valor)\n    return dict(form=form)\n\n\ndef quicksort():\n    form = SQLFORM.factory(\n        Field(\'lista\', label="lista", requires=IS_NOT_EMPTY())\n    )\n    if form.process().accepted:\n        try:\n            Str = str(form.vars.lista).split(",")\n            vetor = [int(n) for n in Str]\n            valor = ksort(vetor)\n        except:\n            response.flash = "ERRO, formato invalido, tente \'1,2,3\'"\n            return dict(form=form)\n\n        return dict(form=form, valor=valor)\n    return dict(form=form)\n\n\nclass ItensPersonalizados():\n    def __init__(self, valor):\n        """\n        Objeto que contem o mapeamento direita e esquerda\n        de cada item\n        :param valor: Valor do item\n        :return:\n        """\n        self.esquerda = 0\n        self.direita = 0\n        self.valor = valor\n\n\nclass ListaPersonalizada():\n    """\n    Gerenciador de itens, faz as opera\xc3\xa7\xc3\xb5es basicas de lista\n    e simula o funcionamento de uma lista em python usando objetos\n    """\n\n    def __init__(self):\n        #Inicia objeto, inicia uma lista representativa\n        self.emulaLista = list()\n\n    def add(self, item):\n        """\n        Adiciona um item ao pacote especial\n        apos adicionar ao pacote, todos os indices\n        s\xc3\xa3o atualizados\n        :param item:\n        :return:\n        """\n        item = ItensPersonalizados(item)\n        self.emulaLista.append(item)\n        esquerda =0\n        direita = 1\n        for e in self.emulaLista:\n            e.esquerda = esquerda\n            e.direita = direita\n            esquerda = esquerda + 1\n            direita = direita + 1\n        self.emulaLista[-1].direita = 0\n\n    def get(self, indice):\n        """\n        Get, retorna o item naquela posi\xc3\xa7\xc3\xa3o\n        isso \xc3\xa9 virtualizado utilizando uma "proporcao arbitraria"\n        :param indice:\n        :return:\n        """\n        esquerda = indice\n        direita = indice + 1 if len(self.emulaLista) != indice+1 else 0\n        for e in self.emulaLista:\n            if e.esquerda == esquerda and e.direita == direita:\n                return e.valor\n        raise Exception("indice n\xc3\xa3o encontrado")\n\n    def remove(self, indice):\n        """\n        N\xc3\xa3o vamos usar mais fiz uma fun\xc3\xa7\xc3\xa3o para tornar objeto lixo\n        :param indice:\n        :return:\n        """\n        esquerda = indice\n        direita = indice + 1 if len(self.emulaLista) != indice+1 else 0\n        for e in self.emulaLista:\n            if e.esquerda == esquerda and e.direita == direita:\n                e.esquerda = None\n                e.direita = None\n                e.valor = None\n                self.coletorDelixo()\n                return True\n        raise Exception("indice n\xc3\xa3o encontrado")\n\n    def coletorDelixo(self):\n        """\n        Todo lixo precisa ser coletado (:\n        fiz essa classe para coletar elementos nulos e reorganizar\n        a lista por completo\n        :return:\n        """\n        for index in range(0, len(self.emulaLista)-1):\n            if self.emulaLista[index].esquerda is None and self.emulaLista[index].direita is None:\n                self.emulaLista.remove(index)\n        esquerda = 0\n        direita = 1\n        for e in self.emulaLista:\n            e.esquerda = esquerda\n            e.direita = direita\n            esquerda = esquerda + 1\n            direita = direita + 1\n        self.emulaLista[-1].direita = 0\n\n    def set(self, indice, valor):\n        """\n        Seta um valor dentro do vetor, mantendo a ordem da estrutura\n        :param indice:\n        :param valor:\n        :return:\n        """\n        esquerda = indice\n        direita = indice + 1 if len(self.emulaLista) != indice+1 else 0\n        for e in self.emulaLista:\n            if e.esquerda == esquerda and e.direita == direita:\n                e.valor = valor\n                return True\n        raise Exception("indice n\xc3\xa3o encontrado")\n\n    def len(self):\n        """\n        Retorna a quantidade de elementos da lista virtual\n        :return:\n        """\n        return len(self.emulaLista)\n\n    def __iter__(self):\n        """\n        Para simular o interador, preciso recriar\n        :return:\n        """\n        for i in self.emulaLista:\n            yield i\n\n    def __add__(self, other):\n        """\n        e preciso simular a soma tamb\xc3\xa9m ):\n        :param other:\n        :return:\n        """\n        self.emulaLista = self.emulaLista + other.emulaLista\n        return self\n\n    def sum(self, lista):\n        newLista = ListaPersonalizada()\n        for i in lista:\n            for e in i:\n                newLista.add(e)\n        return newLista\n\n    def next(self):\n        for i in self.emulaLista:\n            yield i\n\n\ndef bubbleSort(ListaEspecial):\n    # do fim para come\xc3\xa7o, voltando um a um\n    for passnum in range(ListaEspecial.len()-1, 0, -1):\n        # pega posi\xc3\xa7\xc3\xa3o atual, intera 0-posi\xc3\xa7\xc3\xa3o ordenando\n        for i in range(passnum):\n            #utilizando a lista especial,  ordena os valores\n            if ListaEspecial.get(i) > ListaEspecial.get(i+1):\n                temp = ListaEspecial.get(i)\n                ListaEspecial.set(i, ListaEspecial.get(i+1))\n                ListaEspecial.set(i+1, temp)\n\n\n\ndef ksort(vetor):\n    if len(vetor) <= 1:\n        return vetor # uma lista vazia ou com 1 elemento ja esta ordenada\n    menor, igual, maior = [], [], [] # cria as sublistas dos maiores, menores e iguais ao pivo\n    pivo = vetor[0] # escolhe o pivo. neste caso, o primeiro elemento do vetor\n    for x in vetor:\n# adiciona o elemento x a lista correspondeste\n        if x < pivo:\n            menor.append(x)\n        elif x == pivo:\n            igual.append(x)\n        else:\n            maior.append(x)\n    return quicksort(menor) + igual + quicksort(maior) # concatena e retorna recursivamente\n# .. as listas ordenadas\n\n\ndef user():\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n\ndef call():\n    return service()\n\n\n\nresponse._vars=response._caller(bolha)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/isvaldo/workspace/Trabalhos-Faculdade/Estrutura de dados II/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/isvaldo/workspace/Trabalhos-Faculdade/Estrutura de dados II/web2py/applications/welcome/controllers/default.py", line 323, in <module>\n  File "/home/isvaldo/workspace/Trabalhos-Faculdade/Estrutura de dados II/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/isvaldo/workspace/Trabalhos-Faculdade/Estrutura de dados II/web2py/applications/welcome/controllers/default.py", line 115, in bolha\n    return dict(form=form, valor=valor)\nNameError: global name \'valor\' is not defined\n'
p11
s.